version: '3.8'

x-common-variables:
  &api-common-variables
  LABELED_PATH: ${LABELED_PATH}
  UNLABELED_PATH: ${UNLABELED_PATH}
  RETRAIN_TARGET: ${RETRAIN_TARGET}
  MODEL_PATH: ${MODEL_PATH}
  IMG_WIDTH: ${IMG_WIDTH}
  IMG_HEIGHT: ${IMG_HEIGHT}
  EPOCHS: ${EPOCHS}
  DATABASE_URL: ${DATABASE_URL}
  ML_ENDPOINT_URL: ${ML_ENDPOINT_URL}
  DATA_SOURCE: ${DATA_SOURCE}

x-aws-credentials:
  &aws-credentials
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_REGION: ${AWS_REGION}
  DATA_SOURCE: ${DATA_SOURCE}

services:
  ml-endpoint-dev:
    image: ml-endpoint-dev
    container_name: ml-endpoint-dev
    restart: on-failure
    build:
      context: ./train_and_predict
      dockerfile: Dockerfile
      target: dev
    environment: *aws-credentials
    ports:
      - 5001:5001
    volumes:
      - ./train_and_predict:/orcagsoc
      - ./utils:/orcagsoc/utils
      - ./data:/orcagsoc/data

  postgres-dev:
    image: postgres
    container_name: postgres-dev
    restart: on-failure
    environment:
      POSTGRES_DB: orcagsoc
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  api-endpoint-dev:
    image: api-endpoint-dev
    container_name: api-endpoint-dev
    restart: on-failure
    build:
      context: ./api
      dockerfile: Dockerfile
      target: dev
    links:
      - postgres-dev:dbserver
      - ml-endpoint-dev:ml
    environment: *api-common-variables
    depends_on:
      postgres-dev:
        condition: service_healthy
      ml-endpoint-dev:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://api-endpoint-dev:5000/statistics"
        ]
      interval: 15s
      timeout: 3s
      retries: 12
      start_period: 30s
    ports:
      - 5000:5000
    volumes:
      - ./api:/orcagsoc
      - ./utils:/orcagsoc/utils
      - ./data:/orcagsoc/data

  webapp-dev:
    image: webapp-dev
    container_name: webapp-dev
    restart: on-failure
    build:
      context: ./webapp
      dockerfile: Dockerfile
      target: dev
    ports:
      - 8080:8080
    depends_on:
      api-endpoint-dev:
        condition: service_healthy
    volumes:
      - ./webapp:/webapp
      - /webapp/node_modules
